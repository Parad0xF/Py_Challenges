# Let's look how recursion works

## Python Code

```python
def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)

Annotations
def factorial(n):
Define the factorial function that takes an argument n.

if n == 1:
1. Base Case: If n is 1, the function returns 1, as the factorial of 1 is 1.

return 1
2. Return Statement for Base Case: Here, 1 is returned as the factorial of 1 is always 1.

else:
3. Recursive Case: If n is not 1, then the function proceeds to the recursive case.

return n * factorial(n - 1)
4. Recursive Function Call: The function calls itself with n - 1. The product of n and the factorial of n - 1 is returned until n is decremented to 1.

Recursive Call Illustration
factorial(3) starts and needs to calculate factorial(2)
factorial(2) starts and needs to calculate factorial(1)
factorial(1) returns 1, which is then used to calculate factorial(2)
factorial(2) returns 2, which is then used to calculate factorial(3)
factorial(3) returns 6 as the final result
Each recursive call waits for the result of a smaller instance of the problem, building up the result as the stack of calls unwinds.